# this is the development docker compose; does not include containers not needed and adds some config for development
#
# run development:
#    docker-compose up -d
#
# NOTE: if -f is not given, 'docker-compose up' will use docker-compose.override.yaml (https://docs.docker.com/compose/extends/)

version: '3'

services:

  arena-web: # create a container named "arena-web"; other service containers in this file can resolve its name (arena-web)
    image: "nginx" # creates container from nginx
    volumes:
      - ./conf/arena-web-dev.conf:/etc/nginx/conf.d/arena-web.conf:ro # mount nginx config
      - ./ARENA-core:/usr/share/nginx/html:ro # mount root html from ./ARENA-core
      - ./conf/arena-web-conf:/usr/share/nginx/html/conf:ro # arena client code conf
      - ./data/certbot/conf:/etc/letsencrypt:ro # mount certbot files (used in conf/nginx-conf.d/arena-web.conf)
      - ./data/certbot/www:/var/www/certbot:ro # mount certbot files (used in conf/nginx-conf.d/arena-web.conf)
      - account-static-content:/usr/share/nginx/account-static:ro # serve account static files
    ports:
      - "80:80" # map port 80 on the host to port 80 on the container
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'" # reload certificates every 6h
    depends_on:
      - mqtt
      - arena-persist
      - store
      - arena-account
      - arts
      # - py-runtime

  mongodb:
    image: mongo # pull from https://hub.docker.com/_/mongo/
    volumes:
      - ./data/mongodb:/data/db:rw # permanent storage on the host

  arena-persist:
    build: "arena-persist" # builds container from arena-persist Dockerfile
    user: "node"
    ports:
      - 8884:8884/tcp
    volumes:
      - ./conf/persist-config.json:/home/node/app/config.json:ro # mount updated config.json that uses the container name
      - ./data/keys/pubsubkey.pub:/home/node/app/pubsubkey.pub:ro # pubsub public key available to persist
    working_dir: /home/node/app
    command: "npm run start"
    depends_on:
      - mongodb
      - mqtt

  arena-account:
    build: "arena-account" # builds container from arena-account Dockerfile
    volumes:
      - ./conf/arena-account-settings.py:/usr/src/app/arena_account/settings.py:ro
      - account-static-content:/usr/src/app/static # static content
      - ./data/keys/pubsubkey.pem:/home/node/app/pubsubkey.pem:ro # pubsub key available to service
      - ./data/account:/usr/src/app/db # account db
    env_file:
      - .env
      - secret.env
    ports:
      - "8000:8000"
    command: "python manage.py runserver 0.0.0.0:8000"
    depends_on:
      - arena-persist

  mqtt:
    image: conixcenter/arena-broker # pulls from https://hub.docker.com/repository/docker/conixcenter/arena-broker
    volumes:
      - ./conf/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro # mount local config file to /mosquitto/config/mosquitto.conf in the container
      - ./data/keys/pubsubkey.der:/pubsubkey.der:ro # pubsub key available to service
      - ./data/certbot/conf:/etc/letsencrypt:ro # mount certs volume (see conf/mosquitto.conf to see how the files are used)
    env_file: secret.env
    ports:
      - 1883:1883/tcp # mqtt; map port for listener configured in /conf/mosquitto.conf
      - 9001:9001/tcp # mqtt-ws
      - 8083:8083/tcp # mqtt-wss
      - 8883:8883/tcp # mqtt-tls
    # healthcheck:
    #     test: ["CMD", "ls", "-l"]
    #     #test: ["CMD", "curl", "-f", "http://localhost:9001"]
    #     #test: ["CMD", "mosquitto_sub", "-h", "http://localhost", "-t", "#", "-u", "cli", "-p", "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJjbGkiLCJzdWJzIjpbIiMiXSwicHVibCI6WyIjIl0sImlhdCI6MTYwNzI4MzU0MSwiZXhwIjoxNjM4ODE5NTQxfQ.huVkRCpyCNJLceijqWaW1rHnmnD5vIIO82CtKygl8wfBbscyflc3eHo5z_h6vin6X3zyXNES3XfJ_L3SUYjK_4DaTD7iGqqrOpO-D_u4za0fWUd62RfM32MJ1WGQRe8d20wPeNcnoaDgc787YMa6GdN6LrE45vXbvVOSV2EP_3__3vdO1Bi_HCg55sG8qra6RyvOxUlx-9wF5B8LXnN2YU_WWK835OScg3Peq0yTgU4IUjba4V_lpVwlYcVvdxPEnNb20jdENVaoIBndsy2-XQbqaZw63SsZshGqazvyP0D-ASN7pCoHKIcffAEx45pyJY-ZHDCcMIZGBHbiigTPEzZ2e1uRmwJe_ziBi6EwHhHffpYdRdsDmAD9svEjYU5L-DMrBpNKyYfhZl4kTSP1aJMCXRaMZoSaATp73tuwPoX-oufzVpmfqcSrPh6k_yw0wsJU9KwRq_m3vw6ibhmqGsGRdKe2mQMmIhsagJrfIw8tQaB9jkpVabFkkBiszpiRF6433O9CM6p8GCbjQUXtKODWNmIbG9AiTas5exj8ih4PYuNojX9jbPdxfkj2Ik76rK5eaWPg9YH8zWbPoJlVyQMmihtwpcFgAYu26nmBemCefUod0jegzI7Rtmwq7JEzZkDWUoap7LoEe-jTBWbw3nTzIaSPWeL1ZIdz1kVzWN0"]
    #     #test: ["CMD-SHELL", "timeout -t 5 mosquitto_sub -t '$$SYS/#' -C 1 | grep -v Error || exit 1"]
    #     interval: 10s
    #     timeout: 10s
    #     retries: 6

  store:
    image: "conixcenter/arena-store"  # pulls from https://hub.docker.com/repository/docker/conixcenter/arena-store
    volumes:
      - ./conf/arena-store-config.json:/arena-store/.config.json:ro
      - ./ARENA-core/store:/srv-files:rw
      - ./data/arena-store:/arena-store/data:rw

  arts:
    build: "arts/arts-main"
    volumes:
      - ./conf/arts-settings.py:/usr/src/app/arts_api/settings.py:ro
      - arts-static-content:/usr/src/app/public:ro # static arts visualization page
    env_file:
      - .env
      - secret.env
    command: "python manage.py runserver 0.0.0.0:8000"
    depends_on:
      mqtt:
        condition: service_healthy
    # depends_on:
    #   - mqtt

  py-runtime:
    build: "arena-runtime-simulated"
    volumes:
      - ./conf/arena-runtime-simulated.conf:/usr/src/app/config.json:ro
    depends_on:
      mqtt:
        condition: service_healthy
    depends_on:
      - arts

volumes:
  arts-static-content:
  account-static-content:
